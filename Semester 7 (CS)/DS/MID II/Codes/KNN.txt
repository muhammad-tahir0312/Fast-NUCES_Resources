# 1. KNN with data split

import pandas
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier

names = ['sepal-length', 'sepal-width', 'petal-length', 'petal-width', 'class']
dataset = pandas.read_csv("iris.csv", names=names, header=None)
dataset = dataset.iloc[1:]
print("Data set size: ", dataset.shape)
print("Class distribution: \n", dataset.groupby('class').size())

array = dataset.values
X = array[:,0:4]
Y = array[:,4]
t_size = 0.20
seed = 7
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=t_size, random_state=seed)

knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)
predictions = knn.predict(X_test)

print("Accuracy: ", accuracy_score(Y_test, predictions))
print("Confusion Matrix: \n", confusion_matrix(Y_test, predictions))
print("Classification Report: \n", classification_report(Y_test, predictions))

for k in range(1, 11):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, Y_train)
    predictions = knn.predict(X_test)
    print(f"Accuracy with k={k}: {accuracy_score(Y_test, predictions)}")

for seed_value in range(1, 11):
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=t_size, random_state=seed_value)
    knn = KNeighborsClassifier()
    knn.fit(X_train, Y_train)
    predictions = knn.predict(X_test)
    print(f"Accuracy with seed={seed_value}: {accuracy_score(Y_test, predictions)}")

------------------------------------------------------------------------------------------------------------

# 2. KNN without data split

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier

train_data = pd.read_csv("datatraining.txt")
test_data = pd.read_csv("datatest.txt")
test2_data = pd.read_csv("datatest2.txt")

train_data = train_data.drop('date', axis=1)
test_data = test_data.drop('date', axis=1)
test2_data = test2_data.drop('date', axis=1)

X_train = train_data.iloc[:, :-1].values
Y_train = train_data.iloc[:, -1].values

X_test = test_data.iloc[:, :-1].values
Y_test = test_data.iloc[:, -1].values

X_test2 = test2_data.iloc[:, :-1].values
Y_test2 = test2_data.iloc[:, -1].values

knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)

predictions_test = knn.predict(X_test)
predictions_test2 = knn.predict(X_test2)

print("Test Data Metrics:")
print("Accuracy: ", accuracy_score(Y_test, predictions_test))
print("Confusion Matrix: \n", confusion_matrix(Y_test, predictions_test))
print("Classification Report: \n", classification_report(Y_test, predictions_test))

print("Test2 Data Metrics:")
print("Accuracy: ", accuracy_score(Y_test2, predictions_test2))
print("Confusion Matrix: \n", confusion_matrix(Y_test2, predictions_test2))
print("Classification Report: \n", classification_report(Y_test2, predictions_test2))

print("\nTest Data with Different k Values:")
for k in range(1, 11):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, Y_train)
    predictions_test = knn.predict(X_test)
    print(f"Accuracy with k={k} (Test): {accuracy_score(Y_test, predictions_test)}")

print("\nTest2 Data with Different k Values:")
for k in range(1, 11):
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, Y_train)
    predictions_test2 = knn.predict(X_test2)
    print(f"Accuracy with k={k} (Test2): {accuracy_score(Y_test2, predictions_test2)}")
