from numpy import array
from numpy.linalg import eig
import numpy as np

matrix = array([
    [5, 4, 11, 10, 5, 4, 7, 9, 1, 3],
    [4, 5, 10, 11, 5, 3, 8, 10, 2, 4],
    [11, 10, 25, 24, 2, 3, 12, 15, 5, 6],
    [10, 11, 24, 25, 4, 5, 14, 16, 7, 8],
    [7, 8, 17, 18, 9, 10, 19, 20, 11, 12],
    [9, 10, 20, 21, 12, 13, 22, 23, 14, 15],
    [1, 2, 5, 6, 3, 4, 7, 8, 9, 10],
    [3, 4, 7, 8, 5, 6, 11, 12, 13, 14]
])

print("Original Matrix:")
print(matrix)

matrix_transpose = matrix.T
print("\nMatrix Transpose:")
print(matrix_transpose)

covariance_matrix = np.matmul(matrix, matrix_transpose)
print("\nCovariance Matrix:")
print(covariance_matrix)

eigenvalues, eigenvectors = eig(covariance_matrix)
print("\nEigenvalues:")
print(eigenvalues)
print("\nEigenvectors:")
print(eigenvectors)

sorted_eigenvalues = np.sort(eigenvalues)
print("\nSorted Eigenvalues:")
print(sorted_eigenvalues)

principal_components = np.delete(eigenvectors, 3, axis=1)
print("\nPrincipal Components:")
print(principal_components)

appended_components = np.pad(principal_components, ((0, 2), (0, 0)), mode='constant')
print("\nAppended Components:")
print(appended_components)

pca = np.matmul(matrix, appended_components)
print("\nPCA Transformation:")
print(pca)

u, singular_values, v = np.linalg.svd(matrix, full_matrices=True)
print("\nSVD:")
print("U:")
print(u.shape)
print(u)
print("Singular Values:")
print(singular_values.shape)
print(singular_values)
print("V:")
print(v.shape)
print(v)
